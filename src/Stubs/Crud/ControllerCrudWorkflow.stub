<?php

namespace App\Http\Controllers\Trident;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Http\JsonResponse;
use App\Trident\Interfaces\Workflows\Logic\{{Td_entity}}Interface as {{Td_entity}}Workflow;
use App\Trident\Interfaces\Workflows\Repositories\{{Td_entity}}RepositoryInterface as {{Td_entity}}Repository;
use App\Trident\Workflows\Validations\{{Td_entity}}StoreRequest;
use App\Trident\Workflows\Validations\{{Td_entity}}UpdateRequest;
use App\Trident\Workflows\Schemas\Logic\{{Td_entity}}\Typed\StructIndex{{Td_entity}};
use App\Trident\Workflows\Schemas\Logic\{{Td_entity}}\Typed\StructStore{{Td_entity}};
use App\Trident\Workflows\Schemas\Logic\{{Td_entity}}\Typed\StructShow{{Td_entity}};
use App\Trident\Workflows\Schemas\Logic\{{Td_entity}}\Typed\StructUpdate{{Td_entity}};

class {{Td_entity}}Controller extends Controller
{
    protected ${{td_entity}}_workflow;
    protected ${{td_entity}}_repository;

    public function __construct({{Td_entity}}Workflow ${{td_entity}}_workflow, {{Td_entity}}Repository ${{td_entity}}_repository)
    {
        $this->{{td_entity}}_workflow = ${{td_entity}}_workflow;
        $this->{{td_entity}}_repository = ${{td_entity}}_repository;
    }

    public function index(Request $request): JsonResponse
    {
        $this->authorize('list',$this->{{td_entity}}_repository);
        $struct_index_{{td_entity}} = new StructIndex{{Td_entity}}( $request->all() );
        ${{td_entity}}_resource_collection = $this->{{td_entity}}_workflow->index($struct_index_{{td_entity}});
        return response()->json( ${{td_entity}}_resource_collection );
    }

    public function create(): Response
    {
        $this->authorize('create',$this->{{td_entity}}_repository);
        return response('');
    }

    public function store({{Td_entity}}StoreRequest $request): JsonResponse
    {
        $this->authorize('create',$this->{{td_entity}}_repository);
        $struct_store_{{td_entity}} = new StructStore{{Td_entity}}( $request->all() );
        ${{td_entity}}_resource = $this->{{td_entity}}_workflow->store($struct_store_{{td_entity}});
        return response()->json( ${{td_entity}}_resource );
    }

    public function show(int $id): JsonResponse
    {
        $this->authorize('view', [$this->{{td_entity}}_repository, $id]);
        $struct_show_{{td_entity}} = new StructShow{{Td_entity}}(['id' => (int)$id]);
        return response()->json( $this->{{td_entity}}_workflow->show($struct_show_{{td_entity}}) );
    }

    public function edit(int $id): Response
    {
        $this->authorize('update', [$this->{{td_entity}}_repository, $id]);
        ${{td_entity}} = $this->{{td_entity}}_workflow->edit($id);
        return response('');
    }

    public function update({{Td_entity}}UpdateRequest $request, int $id): JsonResponse
    {
        $this->authorize('update', [$this->{{td_entity}}_repository, $id]);
        $struct_update_{{td_entity}} = new StructUpdate{{Td_entity}}($request->all());        
        ${{td_entity}}_resource = $this->{{td_entity}}_workflow->update($struct_update_{{td_entity}});
        return response()->json( ${{td_entity}}_resource );
    }

    public function destroy(int $id): JsonResponse
    {
        $this->authorize('delete', [$this->{{td_entity}}_repository, $id]);
        return response()->json( $this->{{td_entity}}_workflow->destroy($id) );
    }

}
