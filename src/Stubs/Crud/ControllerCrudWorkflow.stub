<?php

namespace App\Http\Controllers\Trident;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
// use Illuminate\Container\Container as App;
// use Workflow;
use App\Trident\Interfaces\Workflows\Logic\{{Td_entity}}Interface as {{Td_entity}}Workflow;
use App\Trident\Interfaces\Workflows\Repositories\{{Td_entity}}RepositoryInterface as {{Td_entity}}Repository;
// use App\Trident\Workflows\Exceptions\{{Td_entity}}Exception;
// use App\Trident\Workflows\Events\Triggers\{{Td_entity}}Trigger;
use App\Trident\Workflows\Validations\{{Td_entity}}StoreRequest;
use App\Trident\Workflows\Validations\{{Td_entity}}UpdateRequest;
use App\Trident\Workflows\Schemas\Logic\{{Td_entity}}\Typed\StructIndex{{Td_entity}};
use App\Trident\Workflows\Schemas\Logic\{{Td_entity}}\Typed\StructStore{{Td_entity}};
use App\Trident\Workflows\Schemas\Logic\{{Td_entity}}\Typed\StructUpdate{{Td_entity}};

class {{Td_entity}}Controller extends Controller
{
    
    /**
     * @var {{Td_entity}}Workflow
     */
    protected ${{td_entity}}_workflow;
    
    /**
     * @var {{Td_entity}}Repository
     */
    protected ${{td_entity}}_repository;

    public function __construct({{Td_entity}}Workflow ${{td_entity}}Workflow, {{Td_entity}}Repository ${{td_entity}}_repository)
    {
        $this->{{td_entity}}_workflow = ${{td_entity}}Workflow;
        $this->{{td_entity}}_repository = ${{td_entity}}_repository;
    }


    //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    // RESTFUL CRUD START
    //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

    /**
     * Display a listing of the resource.
     *
     * @param Request  $request
     * @return {{Td_entity}}Repository
     */
    public function index(Request $request)
    {
        $this->authorize('list',$this->{{td_entity}}_repository);
        $structIndex{{Td_entity}} = new StructIndex{{Td_entity}}( $request->all() );
        ${{td_entity}}ResourceCollection = $this->{{td_entity}}_workflow->index($structIndex{{Td_entity}});
        return response()->json( ${{td_entity}}ResourceCollection );
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\View\View
     */
    public function create()
    {   
        $this->authorize('create',$this->{{td_entity}}_repository);
        return view('{{td_entity}}_create');  //ayto DEN tha to exw sto restful_crud code generation
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param {{Td_entity}}StoreRequest  $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function store({{Td_entity}}StoreRequest $request)
    {
        $this->authorize('create',$this->{{td_entity}}_repository);
        $structStore{{Td_entity}} = new StructStore{{Td_entity}}( $request->all() );
        ${{td_entity}}Resource = $this->{{td_entity}}_workflow->store($structStore{{Td_entity}});
        return response()->json( ${{td_entity}}Resource );
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function show($id)
    {
        $this->authorize('view', [$this->{{td_entity}}_repository, $id]);
        return response()->json( $this->{{td_entity}}_workflow->show($id) );
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\View\View
     */
    public function edit($id)
    {
        $this->authorize('update', [$this->{{td_entity}}_repository, $id]);
        ${{td_entity}} = $this->{{td_entity}}_workflow->edit($id);
        return view('{{td_entity}}_edit', compact('{{td_entity}}'));    //ayto DEN tha to exw sto restful_crud code generation
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  {{Td_entity}}UpdateRequest  $request
     * @param  int  $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function update({{Td_entity}}UpdateRequest $request, $id)
    {   
        $this->authorize('update', [$this->{{td_entity}}_repository, $id]);
        $structUpdate{{Td_entity}} = new StructUpdate{{Td_entity}}($request->all());        
        ${{td_entity}}Resource = $this->{{td_entity}}_workflow->update($structUpdate{{Td_entity}});
        return response()->json( ${{td_entity}}Resource );
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy($id)
    {
        $this->authorize('delete', [$this->{{td_entity}}_repository, $id]);
        return response()->json( $this->{{td_entity}}_workflow->destroy($id) );
    }

    //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    // RESTFUL CRUD END
    //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=



    
}
