<?php

namespace App\Trident\Workflows\Logic;

use App\Models\{{Td_entity}} as {{Td_entity}}Model;
use App\Trident\Workflows\Exceptions\{{Td_entity}}Exception;
use App\Trident\Interfaces\Workflows\Repositories\{{Td_entity}}RepositoryInterface as {{Td_entity}}Repository;
use App\Trident\Interfaces\Workflows\Logic\{{Td_entity}}Interface;
use App\Trident\Interfaces\Business\Logic\{{Td_entity}}Interface as {{Td_entity}}Business;
use App\Trident\Workflows\Schemas\Logic\{{Td_entity}}\Typed\StructIndex{{Td_entity}};
use App\Trident\Workflows\Schemas\Logic\{{Td_entity}}\Typed\StructStore{{Td_entity}};
use App\Trident\Workflows\Schemas\Logic\{{Td_entity}}\Typed\StructUpdate{{Td_entity}};
use App\Trident\Workflows\Schemas\Logic\{{Td_entity}}\Resources\{{Td_entity}}Resource;
use App\Trident\Workflows\Schemas\Logic\{{Td_entity}}\Resources\{{Td_entity}}ResourceCollection;

class {{Td_entity}} implements {{Td_entity}}Interface
{
    protected $app;
    protected ${{td_entity}}_business;
    protected ${{td_entity}}_repository;

    public function __construct({{Td_entity}}Business ${{td_entity}}_business, {{Td_entity}}Repository ${{td_entity}}_repository)
    {
        $this->{{td_entity}}_business = ${{td_entity}}_business;
        $this->{{td_entity}}_repository = ${{td_entity}}_repository;
    }

    public function index(StructIndex{{Td_entity}} $structIndex{{Td_entity}}): {{Td_entity}}ResourceCollection
    {
        $data = $structIndex{{Td_entity}}->getFilledValues();
        
        ${{td_entity}}s = $this->{{td_entity}}_repository->get();
        return new {{Td_entity}}ResourceCollection(${{td_entity}}s);        
    }

    public function create()
    {   
        //
        // TO DO
        //
    }

    public function store(StructStore{{Td_entity}} $structStore{{Td_entity}}): {{Td_entity}}Resource
    {        
        $data = $structStore{{Td_entity}}->getFilledValues();
        $new_{{td_entity}} = $this->{{td_entity}}_repository->create($data);

        return new {{Td_entity}}Resource($new_{{td_entity}});
    }

    public function show($id): {{Td_entity}}Resource
    {
        ${{td_entity}} = $this->{{td_entity}}_repository->findOrFail($id);
        return new {{Td_entity}}Resource(${{td_entity}});
    }

    public function edit($id): {{Td_entity}}Model
    {
        return $this->{{td_entity}}_repository->find($id);
    }

    public function update(StructUpdate{{Td_entity}} $structUpdate{{Td_entity}}): {{Td_entity}}Resource
    {   
        $id = $structUpdate{{Td_entity}}['id'];
        $data = $structUpdate{{Td_entity}}->getFilledValues();
        ${{td_entity}} = $this->{{td_entity}}_repository->findOrFail($id);

        try {
            ${{td_entity}}->update($data);
        } catch (\Exception $e) {
            throw new {{Td_entity}}Exception('updateFailed');
        }

        return new {{Td_entity}}Resource(${{td_entity}});
    }

    public function destroy($id)
    {
        $deleted_count = $this->{{td_entity}}_repository->destroy($id);
        return ($deleted_count > 0);
    }
}
