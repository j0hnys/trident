<?php

namespace App\Trident\Workflows\Logic;

use App\Trident\Workflows\Exceptions\{{Td_entity}}Exception;
use App\Trident\Interfaces\Workflows\Repositories\{{Td_entity}}RepositoryInterface as {{Td_entity}}Repository;
use App\Trident\Interfaces\Workflows\Logic\{{Td_entity}}Interface;
use App\Trident\Interfaces\Business\Logic\{{Td_entity}}Interface as {{Td_entity}}Business;

class {{Td_entity}} implements {{Td_entity}}Interface
{
    protected $app;
    protected ${{td_entity}}_repository;

    public function __construct({{Td_entity}}Business ${{td_entity}}_business, {{Td_entity}}Repository ${{td_entity}}_repository)
    {
        $this->{{td_entity}}_business = ${{td_entity}}_business;
        $this->{{td_entity}}_repository = ${{td_entity}}_repository;
    }

    public function demo(Array $data)
    {
        $result = $this->{{td_entity}}->demo([
            'string' => 'string',
            'integer' => 1,
        ]);

        return true;
    }

    public function get_all()   //~not to be included in code generator~
    {
        return $this->{{td_entity}}_repository->all();
    }
}
