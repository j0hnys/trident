<?php

namespace Tests\Trident\Functional\Resources\Logic;

use App\User;
use App\Models\{{Td_entity}};
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class {{Td_entity}}Test extends TestCase
{
    use RefreshDatabase;

    public function testIndex(): void
    {
        $user = factory(User::class)->create();
        $td_entity = factory({{Td_entity}}::class)->create([
        {{# index_request_properties }}
            {{{property}}}
        {{/ index_request_properties }}
        {{^ index_request_properties }}
            //
        {{/ index_request_properties }}
        ]);

        $response = $this->actingAs($user)
                         ->get('/trident/resource/{{td_entity}}')
                         ->assertJsonFragment([
                        {{# index_response_properties }}
                            {{{property}}}
                        {{/ index_response_properties }}
                        {{^ index_response_properties }}
                            //
                        {{/ index_response_properties }}
                         ]);        
        $response->assertStatus(200);
    }

    public function testCreate(): void
    {
        $this->assertTrue(true);
    }

    public function testStore(): void
    {
        $user = factory(User::class)->create();
        {{# has_relation_ids }}
        factory({{Td_entity}}::class)->create();
        {{/ has_relation_ids }}
        $request_body = [
        {{# store_request_properties }}
            {{{property}}}
        {{/ store_request_properties }}
        {{^ store_request_properties }}
            //
        {{/ store_request_properties }}
        ];

        $response = $this->actingAs($user)
                         ->json(
                            'POST', 
                            '/trident/resource/{{td_entity}}', 
                            $request_body
                         );

        $this->assertDatabaseHas('{{model_db_name}}', $request_body);
        $response->assertStatus(200);
    }

    public function testShow(): void
    {
        $user = factory(User::class)->create();
        $td_entity = factory({{Td_entity}}::class)->create([
            'user_id' => $user->id,
        {{# show_request_properties }}
            {{{property}}}
        {{/ show_request_properties }}
        {{^ show_request_properties }}
            //
        {{/ show_request_properties }}
        ]);

        $response = $this->actingAs($user)
                         ->get('/trident/resource/{{td_entity}}/'.$td_entity->id)
                         ->assertJsonFragment([
                        {{# show_response_properties }}
                            {{{property}}}
                        {{/ show_response_properties }}
                        {{^ show_response_properties }}
                            //
                        {{/ show_response_properties }}
                         ]);        
        $response->assertStatus(200);
    }

    public function testEdit(): void
    {
        $this->assertTrue(true);
    }

    public function testUpdate(): void
    {
        $user = factory(User::class)->create();
        $td_entity = factory({{Td_entity}}::class)->create([
            'user_id' => $user->id
        ]);
        $request_body = [
        {{# update_request_properties }}
            {{{property}}}
        {{/ update_request_properties }}
        {{^ update_request_properties }}
            //
        {{/ update_request_properties }}
        ];

        $response = $this->actingAs($user)
                         ->json(
                            'PUT', 
                            '/trident/resource/{{td_entity}}/'.$td_entity->id, 
                            $request_body
                         );
        
        $this->assertDatabaseHas('{{model_db_name}}', [
            'user_id' => $user->id,
        {{# update_request_properties }}
            {{{property}}}
        {{/ update_request_properties }}
        {{^ update_request_properties }}
            //
        {{/ update_request_properties }}
        ]);
        $response->assertStatus(200);
    }

    public function testDestroy(): void
    {
        $user = factory(User::class)->create();
        $td_entity = factory({{Td_entity}}::class)->create([
            'user_id' => $user->id,
        {{# destroy_request_properties }}
            {{{property}}}
        {{/ destroy_request_properties }}
        {{^ destroy_request_properties }}
            //
        {{/ destroy_request_properties }}
        ]);

        $response = $this->actingAs($user)
                         ->json(
                            'DELETE', 
                            '/trident/resource/{{td_entity}}/'.$td_entity->id
                         );
        
        $this->assertDatabaseMissing('{{model_db_name}}', [
            'user_id' => $user->id,
        {{# destroy_request_properties }}
            {{{property}}}
        {{/ destroy_request_properties }}
        {{^ destroy_request_properties }}
            //
        {{/ destroy_request_properties }}
        ]);
        $response->assertStatus(200);
    }

}